# What is the value of the first triangle number to have over five hundred divisors?
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
#  10: 1,2,5,10
#  15: 1,3,5,15
#  21: 1,3,7,21
#  28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

class ProjectEuler
  def first_triangle_num_with_over_N_divisors(n)

    divisor_count = 1
    the_sum  = 0
    add_up_to = 1

    while divisor_count <= n
      the_sum += add_up_to
      divisor_count = the_sum == Math.sqrt(the_sum) * Math.sqrt(the_sum) ? 0 : -1
      1.upto(Math.sqrt(the_sum)) { |i| divisor_count += 2 if the_sum % i == 0 }
      add_up_to += 1
    end
    the_sum
  end
end

solver = ProjectEuler.new
puts solver.first_triangle_num_with_over_N_divisors(500)
